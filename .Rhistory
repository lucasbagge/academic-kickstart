geom_hline(yintercept = qnorm((1+ci)/2)/sqrt(N),
colour = "sandybrown",
linetype = "dashed") +
geom_hline(yintercept = - qnorm((1+ci)/2)/sqrt(N),
colour = "sandybrown",
linetype = "dashed") +
scale_x_continuous(breaks = seq(0,max(df1$lag),6)) +
scale_y_continuous(name = element_blank(),
limits = c(min(df1$acf,df2$pacf),1)) +
ggtitle("ACF") +
theme_bw()
plot.pacf <- ggplot(data = df2, aes(x = lag, y = pacf)) +
geom_col(fill = "#4373B6", width = 0.7) +
geom_hline(yintercept = qnorm((1+ci)/2)/sqrt(N),
colour = "sandybrown",
linetype = "dashed") +
geom_hline(yintercept = - qnorm((1+ci)/2)/sqrt(N),
colour = "sandybrown",
linetype = "dashed") +
scale_x_continuous(breaks = seq(0,max(df2$lag, na.rm = TRUE),6)) +
scale_y_continuous(name = element_blank(),
limits = c(min(df1$acf,df2$pacf),1)) +
ggtitle("PACF") +
theme_bw()
}
cowplot::plot_grid(plot.acf, plot.pacf, nrow = numofrow)
}
ggplot.corr(data = ng_close_month_tidy)
ggplot.corr(data = ts(ng_close_month_tidy))
ng_close_month_ts = ts(ng_close_month)
ggplot.corr(data = ts(ng_close_month_tidy))
ng_close_month_ts = ts(ng_close_month)
ng_close_month_ts
ng_close_month_ts = ts(ng_close_month$NG.Close,
start = c(2007, 1),
end = c(2020, 5),
frequency = 12)
ggplot.corr(data = ts(ng_close_month_tidy))
ng_close_month_ts = ts(ng_close_month$NG.Close,
start = c(2007, 1),
end = c(2020, 5),
frequency = 12)
ggplot.corr(data = ts(ng_close_month_tidy))
ggplot.corr(data = ng_close_month_ts,
lag.max = 24,
ci = 0.95,
large.sample.size = FALSE,
horizontal = TRUE)
ggplot.corr(data = ng_close_month_ts,
lag.max = 24,
ci = 0.95,
large.sample.size = TRUE,
horizontal = TRUE)
ggplot.corr(data = ng_close_month_ts,
lag.max = 10,
ci = 0.95,
large.sample.size = TRUE,
horizontal = TRUE)
?adf.test
library(tseries)
adf.test(ng_close_month_ts)
adf.test(ng_close_month_ts) %>%
kable()
pp.test(ng_close_month_ts)
kpss.test(ng_close_month_ts)
adf.test(ng_close_month_ts)
ptibble <- tibble(
"Test", "P-vluea" ~
"ADF", 0.5116
)
ptibble <- tibble(
"Test", "P-value",
"ADF", 0.5116
)
ptibble
ptibble <- tibble(
~ "Test", "P-value",
"ADF", 0.5116
)
ptibble <- tibble(
~Test, ~P-value,
"ADF", 0.5116
)
library(knitr)
knitr::opts_chunk$set(cache = TRUE, warning = FALSE, message = FALSE,
echo = TRUE, dpi = 300, cache.lazy = FALSE,
tidy = "styler", fig.width = 8, fig.height = 5)
library(scales)
library(tidyverse)
library(quantmod)
library(tidymodels)
library(magrittr)
library(dplyr)
library(ggplot2)
library(ggpubr)
library(forecast)
library(scales)
library(tseries)
adf.test(ng_close_month_ts)
pp.test(ng_close_month_ts)
kpss.test(ng_close_month_ts)
ptibble <- tibble(
~Test, ~P-value,
"ADF", 0.5116
)
ptibble <- tibble(
~ Test, ~ "P-value",
"ADF", 0.5116
)
ptibble <- tribble(
~ Test, ~ "P-value",
"ADF", 0.5116
)
ptibble
pp.test(ng_close_month_ts)
kpss.test(ng_close_month_ts)
ptibble <- tribble(
~ Test, ~ "P-value",
"ADF", 0.5116,
"PP", , 0.6207
"KPSS", 0.01
ptibble <- tribble(
~ Test, ~ "P-value",
"ADF", 0.5116,
"PP", , 0.6207,
"KPSS", 0.01
)
ptibble <- tribble(
~ Test, ~ "P-value",
"ADF", 0.5116,
"PP",  0.6207,
"KPSS", 0.01
)
ptibble
ptibble %>%
kable()
shiny::runApp(appDir = "C:/Users/LUCBA/Projects/mtm/R/appShiny.R")
library(httr)
library(jsonlite)
get <- GET(base, authenticate(username, password, type = "basic"))
base <- "https://www.marinetraffic.com/en/users/my_account/api/account"
get <- GET(base, authenticate(username, password, type = "basic"))
username <- "jkras@orstek.dk"
password <- "Orsted2020"
base <- "https://www.marinetraffic.com/en/users/my_account/api/account"
get <- GET(base, authenticate(username, password, type = "basic"))
View(get)
get
base <- "https://www.marinetraffic.com/en/users/my_account/api/account/76b29ef57c70088d1bb9e8fbc3fbb9de41b843e2"
get <- GET(base, authenticate(username, password, type = "basic"))
get
base <- "https://www.marinetraffic.com/da/ais-api-services/detail/ev03/berth-calls/_:63ca0ba169bcdc8bec8952836a450f1f"
get <- GET(base, authenticate(username, password, type = "basic"))
get
base <- "https://services.marinetraffic.com/api/berth-calls/v:2"
get <- GET(base, authenticate(username, password, type = "basic"))
get
View(get)
library(httr)
library(jsonlite)
username <- "jkras@orstek.dk"
password <- "Orsted2020"
base <- "https://services.marinetraffic.com/api/berth-calls/v:2"
get <- GET(base, authenticate(username, password, type = "basic"))
get
get <- GET(base, authenticate(username, password, type = "basic"),
query = list(
SHIP_ID = "414650"
))
get
base <- "https://services.marinetraffic.com/api/berth-calls/bb6e6261b44aa8bcd8246928b11a8f02e8a2e805/portid:1/dwt_min:2000/dwt_max:70000/timespan:20"
get <- GET(base, authenticate(username, password, type = "basic"),
query = list(
SHIP_ID = "414650"
))
get
get$content
get$all_headers
get$status_code
get$date
get$request
get$content
get <- GET(base, authenticate(username, password, type = "basic"),
query = list(
SHIP_ID
))
get <- GET(base, authenticate(username, password, type = "basic"),
query = list(
SHIP_ID = "414650"
))
get$content
get <- GET(base, authenticate(username, password, type = "basic"),
query = list(
SHIP_ID = "414650",
MMSI = "354530000"
))
get$content
get$content
response <- content(get, as = "text", encoding = "UTF-8")
response
get <- GET(base, authenticate(username, password, type = "basic"),
query = list(
SHIP_ID = "414650",
MMSI = "354530000"
))
get$request
df <- fromJSON(response, flatten = TRUE) %>%
data.frame()
response <- content(get, as = "text", encoding = "UTF-8")
response
response <- content(get)
response
df <- fromJSON(response, flatten = TRUE) %>%
data.frame()
response <- content(get)
response
base <- "https://services.marinetraffic.com/api/berth-calls/7e120e4bbbff931b97b8e3a388a0f68575ba635e/portid:1/dwt_min:2000/dwt_max:70000/timespan:20"
get <- GET(base, authenticate(username, password, type = "basic"),
query = list(
SHIP_ID = "414650",
MMSI = "354530000"
))
get$request
response <- content(get)
response
df <- fromJSON(response, flatten = TRUE) %>%
data.frame()
response <- content(get, as = "text", encoding = "UTF-8")
response
df <- fromJSON(response, flatten = TRUE) %>%
data.frame()
base <- "https://services.marinetraffic.com/api/berth-calls/7e120e4bbbff931b97b8e3a388a0f68575ba635e/portid:value/timespan:#minutes"
get <- GET(base, authenticate(username, password, type = "basic"),
query = list(
SHIP_ID = "414650",
MMSI = "354530000"
))
get$request
response <- content(get, as = "text", encoding = "UTF-8")
response
get <- GET(base, authenticate(username, password, type = "basic"),
query = list(
SHIP_ID = "414650",
MMSI = "354530000"
))
get$request
response <- content(get, as = "xlm", encoding = "UTF-8")
response <- content(get, as = "text")
response
<?xml version="1.0" encoding="UTF-8"?>
library(xml)
library(xml2)
response <- content(get, as = "raw")
response
df <- fromJSON(response, flatten = TRUE) %>%
data.frame()
class(response)
response <- content(get, as = "parsed")
response
get <- GET(base, authenticate(username, password, type = "basic"),
query = list(
MMSI = "354530000"
))
get$request
response <- content(get, as = "parsed")
response
get <- GET(base, authenticate(username, password, type = "basic"),
query = list(
MMSI = 354530000
))
get$request
response <- content(get, as = "parsed")
response
get <- GET(base, authenticate(username, password, type = "basic"),
query = list(
mmsi=241486000
))
get$request
response <- content(get, as = "parsed")
response
base <- "https://services.marinetraffic.com/api/berth-calls/7e120e4bbbff931b97b8e3a388a0f68575ba635e/portid:1/dwt_min:2000/dwt_max:70000/timespan:20"
get <- GET(base, authenticate(username, password, type = "basic"),
query = list(
mmsi=241486000
))
get$request
response <- content(get, as = "text")
library(XML)
install.packages("xml")
install.packages("XML")
library(XML)
xmlpaa <- xmlParse(base)
xmlpaa <- xmlParse(get)
xmlpaa
library(reticulate)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
install.packages("reticulate")
library(reticulate)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
library(knitr)
knitr::opts_chunk$set(cache = TRUE, warning = FALSE, message = FALSE,
echo = TRUE, dpi = 300, cache.lazy = FALSE,
tidy = "styler", fig.width = 8, fig.height = 5)
library(scales)
library(tidyverse)
library(quantmod)
library(tidymodels)
library(magrittr)
library(dplyr)
library(ggplot2)
library(ggpubr)
library(forecast)
library(scales)
library(tseries)
ng_sta <- rnorm(length(ng_close_month_ts),
mean = 1,
sd = 1)
ng_sta
ng_trend <-  cumsum(rnorm(length(ng_close),
mean = 1,
sd = 1)) +
ng_close_month_ts / 100
ng_sta <- rnorm(length(ng_close_month_ts),
mean = 1,
sd = 1)
ng_trend <-  cumsum(rnorm(length(ng_close),
mean = 1,
sd = 4)) +
ng_close_month_ts / 100
ng_trend <-  cumsum(rnorm(length(ng_close_month_ts),
mean = 1,
sd = 4)) +
ng_close_month_ts / 100
ng_sta <- ng_sta / max(ng_sta)
ng_trend <- ng_trend / max(ng_trend)
ng_sta <- ng_sta / max(ng_sta)
ng_trend <- ng_trend / max(ng_trend)
class(ng_sta)
ng_sta_tidy <- tidy(ng_sta)
View(ng_sta_tidy)
ng_sta
plot(ng_sta)
plot(ng_sta, type = "l")
ng_sta %>%
ggplot(
aes(
)) +
geom_line(
color = "indianred3",
size = 1) +
labs(title = "Natural Gas",
subtitle = "2000 to 2020",
x = "",
y = "Close price") +
theme_minimal()
ng_sta_tidy %>%
ggplot(
aes(
)) +
geom_line(
color = "indianred3",
size = 1) +
labs(title = "Natural Gas",
subtitle = "2000 to 2020",
x = "",
y = "Close price") +
theme_minimal()
ng_sta_tidy %>%
ggplot(
aes(x = NULL,
y = x
)) +
geom_line(
color = "indianred3",
size = 1) +
labs(title = "Natural Gas",
subtitle = "2000 to 2020",
x = "",
y = "Close price") +
theme_minimal()
ng_test = ts(ng_sta,
start = c(2007, 1),
end = c(2020, 5),
frequency = 12)
ng_test
class(ng_test)
names(ng_test)
ng_test_tidyr <- tidy(ng_test)
View(ng_test_tidyr)
color = "indianred3",
ng_test_tidyr %>%
ggplot(
aes(x = index,
y = value
)) +
geom_line(
color = "indianred3",
size = 1) +
labs(title = "Natural Gas stationary",
subtitle = "2000 to 2020",
x = "",
y = "Close price") +
theme_minimal()
ng_test_tidy <- tidy(ng_trend)
ng_test_tidyr %>%
ggplot(
aes(x = index,
y = value
)) +
geom_line(
color = "indianred3",
size = 1) +
labs(title = "Natural Gas stationary",
subtitle = "2000 to 2020",
x = "",
y = "Close price") +
theme_minimal()
ng_trend_tidy <- tidy(ng_trend)
ng_trend_tidy %>%
ggplot(
aes(x = index,
y = value
)) +
geom_line(
color = "indianred3",
size = 1) +
labs(title = "Natural Gas stationary",
subtitle = "2000 to 2020",
x = "",
y = "Close price") +
theme_minimal()
ng_close_month_ts %>%
decompose() %>%
autoplot()
ng_close_month_ts %>%
decompose() %>%
autoplot() +
theme_minimal()
fit <- StructTS(ng_close_month_ts,
type = "level")
fit %>%
autoplot() +
autolayer(fitted(h = 12))
fit %>%
autoplot()
fit %>%
autoplot() +
autolayer(fitted(fit))
blogdown:::new_post_addin()
library(knitr)
knitr::opts_chunk$set(cache = TRUE, warning = FALSE, message = FALSE,
echo = TRUE, dpi = 300, cache.lazy = FALSE,
tidy = "styler", fig.width = 8, fig.height = 5)
library(scales)
library(tidyverse)
data <- read.csv("data_sales.csv")
View(data)
View(data)
library(knitr)
knitr::opts_chunk$set(cache = TRUE, warning = FALSE, message = FALSE,
echo = TRUE, dpi = 300, cache.lazy = FALSE,
tidy = "styler", fig.width = 8, fig.height = 5)
library(scales)
library(tidyverse)
library(tidymodels)
library(dplyr)
library(magrittr)
attach(data)
data <- data %>%
mutate(InvoiceDate = as.Date(InvoiceDate))
data %>%
group_by(country) %>%
summarise(nr. = n())
data %>%
group_by(Country) %>%
summarise(nr. = n())
data %>%
group_by(Country) %>%
summarise(nr. = n()) %>%
arrange(nr.)
data %>%
group_by(Country) %>%
summarise(nr. = n()) %>%
arrange(desc(nr.))
data <- data %>%
filter(Country == "United Kingdom") %>%
mutate(InvoiceDate = as.Date(InvoiceDate))
data <- data %>%
filter(Country == "United Kingdom")
data <- read.csv("data_sales.csv")
data_uk <- data %>%
filter(Country == "United Kingdom")
mutate(InvoiceDate = as.Date(InvoiceDate, "%Y-%b-%d"))
data_uk <- data %>%
filter(Country == "United Kingdom") %>%
mutate(InvoiceDate = as.Date(InvoiceDate, "%Y-%b-%d"))
data_uk <- data %>%
filter(Country == "United Kingdom") %>%
mutate(InvoiceDate = as.Date(InvoiceDate, "%b/%d/%Y"))
data_uk <- data %>%
filter(Country == "United Kingdom") %>%
mutate(InvoiceDate = as.Date(InvoiceDate))
data_uk <- data %>%
filter(Country == "United Kingdom") %>%
mutate(InvoiceDate = as.Date(InvoiceDate, format = "%m/%d/%Y"))
data_uk <- data %>%
filter(Country == "United Kingdom")
data_uk <- data %>%
filter(Country == "United Kingdom") %>%
mutate(InvoiceDate = as.Date(InvoiceDate, format = "%m/%d/%Y"))
